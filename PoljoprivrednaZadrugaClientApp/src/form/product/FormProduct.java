/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package form.product;

import controller.Controller;
import domain.MeasurementUnit;
import domain.Product;
import domain.ProductCategory;
import domain.User;
import form.FormMode;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.math.BigDecimal;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import session.Session;

/**
 *
 * @author kicnilec
 */
public class FormProduct extends javax.swing.JDialog {

    private Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();

    /**
     * Creates new form FormNewProduct1
     */
    public FormProduct(java.awt.Frame parent, boolean modal, FormMode mode) {
        super(parent, modal);
        initComponents();
        setLocation();
        setUserInfo();
        populateForm();

        adjustForm(mode);
    }

    public FormProduct(java.awt.Frame parent, boolean modal, FormMode mode, Product product) {
        super(parent, modal);
        initComponents();
        setLocation();
        setUserInfo();
        populateForm();
        populateForm(product);

        adjustForm(mode);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        labelFormName = new javax.swing.JLabel();
        labelCurrentUser = new javax.swing.JLabel();
        panelProductInfo = new javax.swing.JPanel();
        labelName = new javax.swing.JLabel();
        labelDescription = new javax.swing.JLabel();
        labeleMeasurementUnit = new javax.swing.JLabel();
        labelPrice = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtDescription = new javax.swing.JTextArea();
        cmbMeasurementUnit = new javax.swing.JComboBox();
        txtPrice = new javax.swing.JTextField();
        labelID = new javax.swing.JLabel();
        txtID = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        cmbCategories = new javax.swing.JComboBox();
        btnSave = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnEdit = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        labelFormName.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        labelFormName.setText("Create new product");

        labelCurrentUser.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(labelFormName, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(labelCurrentUser)
                .addGap(89, 89, 89))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelFormName)
                    .addComponent(labelCurrentUser))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        panelProductInfo.setBorder(javax.swing.BorderFactory.createTitledBorder("Product info"));

        labelName.setText("Name:");

        labelDescription.setText("Description:");

        labeleMeasurementUnit.setText("Measurement unit:");

        labelPrice.setText("Price:");

        txtDescription.setColumns(20);
        txtDescription.setRows(5);
        jScrollPane1.setViewportView(txtDescription);

        labelID.setText("ID:");

        jLabel1.setText("Product category:");

        javax.swing.GroupLayout panelProductInfoLayout = new javax.swing.GroupLayout(panelProductInfo);
        panelProductInfo.setLayout(panelProductInfoLayout);
        panelProductInfoLayout.setHorizontalGroup(
            panelProductInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelProductInfoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelProductInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelName)
                    .addComponent(labelDescription)
                    .addComponent(labeleMeasurementUnit)
                    .addComponent(labelPrice)
                    .addComponent(labelID)
                    .addComponent(jLabel1))
                .addGap(40, 40, 40)
                .addGroup(panelProductInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(panelProductInfoLayout.createSequentialGroup()
                        .addComponent(txtPrice)
                        .addGap(79, 79, 79))
                    .addComponent(txtName)
                    .addComponent(cmbMeasurementUnit, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtID)
                    .addGroup(panelProductInfoLayout.createSequentialGroup()
                        .addComponent(cmbCategories, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 411, Short.MAX_VALUE)))
                .addContainerGap())
        );
        panelProductInfoLayout.setVerticalGroup(
            panelProductInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelProductInfoLayout.createSequentialGroup()
                .addGroup(panelProductInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelID)
                    .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelProductInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelName)
                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(34, 34, 34)
                .addGroup(panelProductInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelDescription))
                .addGap(6, 6, 6)
                .addGroup(panelProductInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(cmbCategories, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(44, 44, 44)
                .addGroup(panelProductInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbMeasurementUnit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labeleMeasurementUnit))
                .addGap(18, 18, 18)
                .addGroup(panelProductInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(labelPrice)
                    .addComponent(txtPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnEdit.setText("Edit");
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });

        btnCancel.setText("Cancel");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelProductInfo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnCancel)
                        .addGap(18, 18, 18)
                        .addComponent(btnEdit)
                        .addGap(18, 18, 18)
                        .addComponent(btnUpdate)
                        .addGap(18, 18, 18)
                        .addComponent(btnSave)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelProductInfo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSave)
                    .addComponent(btnUpdate)
                    .addComponent(btnEdit)
                    .addComponent(btnCancel))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
        /*
            Okej je ovako ali je bolja varijanta da se odredjena polja naprave "editabilnim"
            polje.setEnabled(true);
         
        JDialog frmEditProduct = new FormProduct((JFrame) SwingUtilities.windowForComponent(this), true, FormMode.EDIT, this.product);
        this.dispose();
        frmEditProduct.setVisible(true);
         */

        adjustForm(FormMode.EDIT);
    }//GEN-LAST:event_btnEditActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        Product product = getProductUpdate();
        try {
            Controller.getInstance().updateProduct(product);
            JOptionPane.showMessageDialog(this, "Product " + product.getName() + " has been successfully updated!", "Updated!", JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            Logger.getLogger(FormProduct.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Product " + product.getName() + " has not been updated!", "Error", JOptionPane.ERROR_MESSAGE);
        }

        this.dispose();
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        try {
            String description = txtDescription.getText().trim();
            String name = txtName.getText().trim();
            String price = txtPrice.getText().trim();
            if (description.isEmpty() || name.isEmpty() || price.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Please fill in all fields!", "ERROR", JOptionPane.ERROR_MESSAGE);
            } else if ((new BigDecimal(price)).compareTo(BigDecimal.ZERO) == 1) {
                Product product = getPopulatedProduct();
                if (product != null) {
                    Controller.getInstance().addProduct(product);
                    JOptionPane.showMessageDialog(this, "Product has been successfully created!", "Product creation", JOptionPane.INFORMATION_MESSAGE);

                    int result = JOptionPane.showConfirmDialog(this, "Create new product?", "Question", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                    if (result == 0) {
                        populateForm(new Product());
                        adjustForm(FormMode.NEW);
                    } else {
                        dispose();
                    }
                }
            } else {
                JOptionPane.showMessageDialog(this, "Price must be greater than zero!", "ERROR", JOptionPane.ERROR_MESSAGE);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage(), "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnSaveActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JComboBox cmbCategories;
    private javax.swing.JComboBox cmbMeasurementUnit;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel labelCurrentUser;
    private javax.swing.JLabel labelDescription;
    private javax.swing.JLabel labelFormName;
    private javax.swing.JLabel labelID;
    private javax.swing.JLabel labelName;
    private javax.swing.JLabel labelPrice;
    private javax.swing.JLabel labeleMeasurementUnit;
    private javax.swing.JPanel panelProductInfo;
    private javax.swing.JTextArea txtDescription;
    private javax.swing.JTextField txtID;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtPrice;
    // End of variables declaration//GEN-END:variables

    private Product getPopulatedProduct() {
        String name = txtName.getText().trim();
        String description = txtDescription.getText().trim();
        BigDecimal price;
        try {
            price = new BigDecimal(txtPrice.getText().trim());
//            System.out.println(price);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Price can not be zero!", "Error", JOptionPane.ERROR_MESSAGE);
            return null;
        }
        MeasurementUnit measurementUnit = MeasurementUnit.valueOf(cmbMeasurementUnit.getSelectedItem().toString());
        User savedUser = Session.getInstance().getUser();
        ProductCategory category = (ProductCategory) cmbCategories.getSelectedItem();
        if (name.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Name can not be empty!", "Error", JOptionPane.ERROR_MESSAGE);
            return null;
        }
        if (description.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Description can not be empty!", "Error", JOptionPane.ERROR_MESSAGE);
            return null;
        }
        Product product = new Product(name, description, price, measurementUnit, savedUser, category);
        return product;
    }

    private void populateForm() {
        populateCmbMeasurementUnit();
        populateCmbCategories();
    }

    private void populateCmbMeasurementUnit() {
        cmbMeasurementUnit.removeAllItems();
        for (MeasurementUnit measurementUnit : MeasurementUnit.values()) {
            cmbMeasurementUnit.addItem(measurementUnit);
        }
    }

    private void setLocation() {
        this.setLocation(dim.width / 2 - this.getSize().width / 2, dim.height / 2 - this.getSize().height / 2);
    }

    private void setUserInfo() {
        User user = Session.getInstance().getUser();
        labelCurrentUser.setText(user.getFirstname() + " " + user.getLastname());
    }

    private void adjustForm(FormMode mode) {
        switch (mode) {
            case NEW:
                labelID.setVisible(false);
                txtID.setVisible(false);

                btnEdit.setVisible(false);
                btnSave.setVisible(true);
                btnCancel.setVisible(true);
                btnUpdate.setVisible(false);

                setTitle("New Product");
                break;
            case VIEW:
                labelID.setVisible(true);
                txtID.setVisible(true);
                txtID.setEnabled(false);

                txtName.setEnabled(false);
                txtDescription.setEnabled(false);
                txtPrice.setEnabled(false);

                cmbMeasurementUnit.setEnabled(false);
                cmbCategories.setEnabled(false);

                btnEdit.setVisible(true);
                btnSave.setVisible(false);
                btnCancel.setVisible(true);
                btnUpdate.setVisible(false);

                setTitle("View Product");
                break;
            case EDIT:
                txtName.setEnabled(true);
                txtDescription.setEnabled(true);
                txtPrice.setEnabled(true);

                cmbMeasurementUnit.setEnabled(true);
                cmbCategories.setEnabled(true);

                btnEdit.setVisible(false);
                btnSave.setVisible(false);
                btnCancel.setVisible(true);
                btnUpdate.setVisible(true);

                setTitle("Edit Product");
                break;
        }
    }

    private void populateForm(Product product) {
        txtID.setText(String.valueOf(product.getId()));
        txtName.setText(product.getName());
        txtDescription.setText(product.getDescription());
        txtPrice.setText(String.valueOf(product.getPrice()));
        cmbMeasurementUnit.setSelectedItem(product.getMeasurementUnit());
        cmbCategories.setSelectedItem(product.getCategory());
    }

    private Product getProductUpdate() {
        Long id = new Long(txtID.getText());
        String name = txtName.getText().trim();
        String description = txtDescription.getText().trim();
        BigDecimal price = new BigDecimal(txtPrice.getText().trim());
        MeasurementUnit measurementUnit = MeasurementUnit.valueOf(cmbMeasurementUnit.getSelectedItem().toString());
        ProductCategory category = (ProductCategory) cmbCategories.getSelectedItem();
        User savedUser = Session.getInstance().getUser();
        Product product = new Product(id, name, description, price, measurementUnit, savedUser, category);
        return product;
    }

    private void populateCmbCategories() {
        cmbCategories.removeAllItems();
        for (ProductCategory value : ProductCategory.values()) {
            cmbCategories.addItem(value);
        }
    }
}
